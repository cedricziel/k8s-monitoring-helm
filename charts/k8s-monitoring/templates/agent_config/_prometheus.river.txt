{{ define "agent.config.prometheus" }}
// Grafana Cloud Prometheus
remote.kubernetes.secret "prometheus_credentials" {
  name = {{ include "kubernetes-monitoring.prometheus.secretname" . | quote}}
  namespace = {{ .Values.externalServices.prometheus.secret.namespace | default .Release.Namespace | quote}}
}

{{- with .Values.externalServices.prometheus }}
prometheus.remote_write "grafana_cloud_prometheus" {
  endpoint {
    url = nonsensitive(remote.kubernetes.secret.prometheus_credentials.data["{{ .hostKey }}"]) + "{{ .writeEndpoint }}"
    headers = { "X-Scope-OrgID" = remote.kubernetes.secret.prometheus_credentials.data["{{ .tenantIdKey }}"] }
{{- if .proxyURL }}
    proxy_url = {{ .proxyURL | quote }}
{{- end }}
{{ if eq .authMode "basic" }}
    basic_auth {
      username = nonsensitive(remote.kubernetes.secret.prometheus_credentials.data["{{ .basicAuth.usernameKey }}"])
      password = remote.kubernetes.secret.prometheus_credentials.data["{{ .basicAuth.passwordKey }}"]
    }
{{- end }}
{{ if .writeRelabelConfigRules }}
{{ .writeRelabelConfigRules | indent 4 }}
{{- end }}
  }
  external_labels = {
    {{- range $k, $v := .externalLabels }}
    {{ $k }} = {{ $v | quote }},
    {{- end }}
{{- end }}
    cluster = {{ required ".Values.cluster.name is a required value. Please set it and try again." .Values.cluster.name | quote }},
  }
}
{{ end }}
